Архитектура моего приложения:

1. Установите зависимости - npm install

2. Для запуска - npm run dev
  

3. Сборка проекта -npm run build

4. Просмотр сборки - npm run preview

5. Prettier-npm run format

6. Eslint - npm run lint
---

## Описание архитектуры

Проект реализован на **React** с использованием **TypeScript** и менеджера состояния **Zustand**. Сборка и запуск осуществляются через **Vite**.

### Основные страницы:

-MainPage('/')
-GeneratorPage('/generator')
-HistoryPage('/history')

### Основные компоненты:

- Layout - Для отображения  шапки сайта и навигации.
- LoadFileArea/GalacticList - Для отображения поля и инпута для добавления файла и сфомировавщейся статистики.
- HistoryList - Для отображения истории.
- Вспомогательные компонеты для отображения UI.

### Состояние приложения:

- **Zustand** хранит информация о статистике и истории
- **История** хранится в `localStorage` через сервис `LocalStorageService`.

### Взаимодействие с localStorage и Backend 
- Запросы описаны в папке api 
- Компоненты взаимодействуют в очередности: component -> store -> services -> api


### Тесты
 - Запускаются при помощь: 
		1. npm run test - запускает unit-тесты 
		2. npm run test:e2e - запускает E2E-тесты

 - Использованные технологии: 
		1. Vitest
		2. React Testing Library
		3.Playwright

 - Описание тестовых сценариев: 
		В Unit тестах - проверить на корректность отдельные модули исходного кода программы,
		 наборы из одного или более программных модулей вместе с соответствующими управляющими данными.
		В E2E тестах - работу всего программного приложения, от начала до конца, имитируя действия реального пользователя
		Для выполнения E2E тестов включите Backend приложения
		

		



